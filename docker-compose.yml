services:
  redpanda:
    image: redpandadata/redpanda:latest
    command:
      - redpanda
      - start
      - --overprovisioned
      - --smp=1
      - --memory=512M
      - --reserve-memory=0M
      - --check=false
      - --kafka-addr
      - INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:19092
      - --advertise-kafka-addr
      - INTERNAL://redpanda:9092,OUTSIDE://localhost:19092
      - --pandaproxy-addr
      - 0.0.0.0:8082
      - --advertise-pandaproxy-addr
      - localhost:8082
      - --schema-registry-addr
      - 0.0.0.0:8081
    ports:
      # expose what you advertise; if you advertise localhost:19092, map 19092 -> 19092 on the host
      - "19092:19092"
      - "9644:9644"    # admin
      - "8081:8081"    # schema registry
      - "8082:8082"    # pandaproxy
    healthcheck:
      test: ["CMD", "bash", "-lc", "rpk cluster info --brokers redpanda:9092 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - ./data/redpanda/:/var/lib/redpanda/data

  redpanda-init:
    image: redpandadata/redpanda:latest
    depends_on:
      redpanda:
        condition: service_healthy
    entrypoint: ["/bin/sh"]
    command:
      - -eu
      - -c
      - |
        set -eu
        i=1
        while [ "$$i" -le 18 ]; do
          echo "[init] attempt $$i: setting cluster defaults via Admin API..."
          if rpk cluster config set log_retention_ms 7200000 --api-urls redpanda:9644 \
          && rpk cluster config set log_segment_ms   900000   --api-urls redpanda:9644 \
          && rpk cluster config set log_segment_size 16777216 --api-urls redpanda:9644
          then
            # read back to assert
            R=$$(rpk cluster config get log_retention_ms --api-urls redpanda:9644 || true)
            S=$$(rpk cluster config get log_segment_ms   --api-urls redpanda:9644 || true)
            B=$$(rpk cluster config get log_segment_size --api-urls redpanda:9644 || true)
            echo "[init] read-back: retention_ms=$$R segment_ms=$$S segment_size=$$B"
            if [ "$$R" = "7200000" ] && [ "$$S" = "900000" ] && [ "$$B" = "16777216" ]; then
              echo "[init] success."
              exit 0
            fi
          fi
          i=$$((i+1))
          sleep 10
        done
        echo "[init] FAILED to apply cluster retention settings" >&2
        exit 1
    restart: "no"

  console:
    image: redpandadata/console:latest
    depends_on:
      redpanda:
        condition: service_healthy
      redpanda-init:
        condition: service_completed_successfully
    environment:
      CONFIG_FILEPATH: /etc/console/config.yaml
    ports:
      - "8080:8080"
    volumes:
      - type: bind
        source: ./console-config.yaml
        target: /etc/console/config.yaml

  ingestor:
    build: ./ingestor
    depends_on:
      redpanda:
        condition: service_healthy
      redpanda-init:
        condition: service_completed_successfully
    environment:
      KAFKA_BROKERS: redpanda:9092
      TOPIC: ships
      AISSTREAM_API_KEY: ${AISSTREAM_API_KEY}
      # whole world:
      BBOX_JSON: '[[[-90, -180], [90, 180]]]'
      # english channel:
      # BBOX_JSON: '[[[48.5, -5.5], [51.5, 2.5]]]'
      # gulf of mexico:
      # BBOX_JSON: '[[[22.0, -97.0], [30.5, -81.0]]]'
      FILTER_MESSAGE_TYPES: "PositionReport"
      RECONNECT_SECONDS: "3"
    restart: unless-stopped

  ws-api:
    build: ./ws-api
    depends_on:
      redpanda:
        condition: service_healthy
      redpanda-init:
        condition: service_completed_successfully
    environment:
      KAFKA_BROKERS: redpanda:9092
      TOPIC: ships
    ports:
      - "8000:8000"
    restart: unless-stopped

  # web:
  #   build: ./web
  #   depends_on:
  #     ws-api:
  #       condition: service_started
  #     redpanda-init:
  #       condition: service_completed_successfully
  #   environment:
  #     NODE_ENV: production
  #     WS_API_INTERNAL_HOST: ${WS_API_INTERNAL_HOST:-ws://ws-api:8000/ws}
  #   ports:
  #     - "3000:3000"
  #   restart: unless-stopped

  timescaledb:
    image: timescale/timescaledb-ha:pg16
    environment:
      POSTGRES_DB: ships
      POSTGRES_USER: ships
      POSTGRES_PASSWORD: ships
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ships -d ships"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - ./data/timescaledb:/var/lib/postgresql/data
      - ./archiver/01_init_timescale.sql:/docker-entrypoint-initdb.d/01_init_timescale.sql:ro
  
  archiver:
    build: ./archiver
    depends_on:
      redpanda:
        condition: service_healthy
      redpanda-init:
        condition: service_completed_successfully
      timescaledb:
        condition: service_healthy
    environment:
      KAFKA_BROKERS: redpanda:9092
      TOPIC: ships
      GROUP_ID: ships-archiver
      PGHOST: timescaledb
      PGPORT: "5432"
      PGDATABASE: ships
      PGUSER: ships
      PGPASSWORD: ships
      BATCH_MAX_ROWS: "2000"
      FLUSH_SECONDS: "2"
    restart: unless-stopped
