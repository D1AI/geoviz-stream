name: Build & Push Docker Images (semver + timestamped tags)

on:
  push:
    branches: ["main", "release/**"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      build_all:
        description: "Build ALL services (ignore path changes)"
        type: boolean
        default: true

permissions:
  contents: read
  packages: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare:
    name: Detect changed services
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      run_build: ${{ steps.set-matrix.outputs.run_build }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Detect changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            ingestor:
              - 'ingestor/**'
            ws_api:
              - 'ws-api/**'
            web:
              - 'web/**'

      - name: Build matrix
        id: set-matrix
        uses: actions/github-script@v7
        env:
          BUILD_ALL: ${{ inputs.build_all }}
        with:
          script: |
            const isTag = context.ref.startsWith('refs/tags/');
            const forceAll = `${process.env.BUILD_ALL}` === 'true';

            const changed = {
              ingestor: `${{ steps.filter.outputs.ingestor }}` === 'true',
              wsapi:    `${{ steps.filter.outputs.ws_api }}` === 'true',
              web:      `${{ steps.filter.outputs.web }}` === 'true',
            };

            const all = [
              { service: 'ingestor', context: './ingestor', dockerfile: './ingestor/Dockerfile' },
              { service: 'ws-api',   context: './ws-api',   dockerfile: './ws-api/Dockerfile' },
              { service: 'web',      context: './web',      dockerfile: './web/Dockerfile' },
            ];

            let include = [];
            if (isTag || forceAll) {
              include = all;
            } else {
              if (changed.ingestor) include.push(all[0]);
              if (changed.wsapi)    include.push(all[1]);
              if (changed.web)      include.push(all[2]);
            }

            core.info(`Selected services: ${include.map(s => s.service).join(', ') || '(none)'}`);
            core.setOutput('matrix', JSON.stringify({ include }));
            core.setOutput('run_build', String(include.length > 0 || isTag || forceAll));

  build:
    name: Build & Push
    needs: prepare
    if: ${{ needs.prepare.outputs.run_build == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Compute timestamp + short SHA for tags like 20250927-190512-ab12cd3
      - name: Compute version vars
        id: vars
        run: |
          echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "ts=$(date -u +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          echo "ref_name=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-${{ matrix.service }}
          # Rich, deterministic tag set
          tags: |
            # ---- SemVer on tag pushes (vX.Y.Z) ----
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}

            # ---- Always add a timestamped commit tag ----
            type=raw,value=${{ steps.vars.outputs.ts }}-${{ steps.vars.outputs.short_sha }}

            # ---- Default branch convenience tags ----
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=main,enable={{is_default_branch}}

            # ---- Branch tags (sanitized) for non-default branches ----
            type=ref,event=branch

            # ---- PR build identifiers (builds only; push is disabled on PRs) ----
            type=ref,event=pr
            type=sha,format=short,prefix=sha-

          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.vars.outputs.ts }}
            org.opencontainers.image.title=${{ matrix.service }}
            org.opencontainers.image.description=${{ matrix.service }} image from ${{ github.repository }}
            org.opencontainers.image.ref.name=${{ steps.vars.outputs.ref_name }}

      - name: Build (PRs) / Push (main & tags & manual)
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max